General Design:

Note: when reading this, have the UML as a reference.

As described in the UML, the game consists of the following classes (groups of classes*): Game, Scoreboard, Display*, TextDisplay, Grid, Square*, Pattern*.

A main.cc file is responsible for handling cmdline input. 

The Game class follows the singleton pattern. This class is intended to provide an interface through which our mainline program can interact with gameplay. As such, a Game object exposes methods for perfoming a move (swapping two squares), increasing or decreasing a level, providing a hint, scrambling a board, restarting a game, initializing a board, etc. A Game object also maintains the current level and provides a factory method to generate squares (this method allocates memory). A Grid object also exposes various removal methods, which are intended to be called by Squares, depending on the type of Square (eg: a LateralSquare would call removeRow when it is removed)

The Scoreboard class is intended to keep track of the current score of the game. It exposes methods such as addScore and getScore.

@TODO: add more info about this
The Grid class is responsible for keeping track of the game board, a two dimensional array of Squares. It exposes methods such as swap (swap two squares) and process (go through board and handle matches). A Grid also owns a Display, which handles the visual representation of the board.

The Display abstract class expects subclasses to implement a draw method. This method is intended to handle visiual display of a square. TextDisplay is a subclass of Display. In TextDisplay's draw method, the Square will be printed to stdout. However, in a graphical display, draw might draw the square onto an instance  of Xwindow.

The Square class is an abstract superclass for types of Squares. It expects subclasses to implement a remove method, which handles behaviour when this square is removed.

The Pattern class is an abstract class that allows for the definition of various patterns. It expects that subclasses implement a vector<Square*> check(int r, int c, const Grid& g) method. This method checks to see if a square at (r,c) on the grid is the most top-right square of a pattern. This allows us to iterate over Patterns in the Grid's process method. If a square satisfies a pattern, it (and other squares that make up the pattern) are removed. Each pattern also has a priority, that determines the order in which patterns are matched. If priority(pattern A) > priority(pattern B) and a square satifies both A and B, squares will be removed according to pattern A.

Question: How could you design your system to make sure that only these kinds of squares can be generated?

Generation of squares is to be handled by the game class through a factory methods. A game singleton object should maintain which level is currently being played. Probabilities for types of squares and square colors are assigned to each possible level. The Game class would then use these values as a basis to determine which square to generate. (e.g. perhaps more green/red blocks are to be spawned on the second level). The factory method should return a tuple with the type and color of the square to be created. We can then send this information to Grid, which can create and add the cell as needed. Thus, the possible types of squares that can be generated can be controlled via the factory methods (ensure factory method returns only desired types).

Question: How could you design your system to allow quick addition of new squares with different abilities without major changes to the existing code?

By implementing specific types of squares as concrete subclasses of an abstract superclass, we can define the game logic to operate on Squares in general. The concreate sunclasses are would be responsible for defining a remove() method (which determines behaviour when this square is removed). Thus, if we wish to add a new type of square, it is simply a matter of writing a new subclass and implementing the remove() method as desired, as well as ensuring that the Game class can create the new square as appropriate. 
                      
Question: How could you design your program to accommodate the possibility of introducing additional levels into the system, with minimum recompilation? 

We are using a concrete class Level to hold the various levels. By adding private fields, such as the relative drop rate for the different colours, and whether or not to spawn special blocks, we can create a huge variety of levels simply by specifying these values in a call to the Level constructor. We also considered using an abstract parent class Level, with each specific level inheriting from the abstract class. The advantage this approach is further flexibility with new/different level constraints, but it also means writing a new subclass for each individual level, and adding it to some sort of global list, so that the program is aware of the maximum level. We decided that using the concrete class approach provides sufficient level variety, while simplifying the code overall.

Question: How could you design your system to accommodate the addition of new command names, or changes to existing command names, with minimal changes to source and minimal recompilation? (We acknowledge, of course, that adding a new command probably means adding a new feature, which can mean adding a non-trivial amount of code.) How difficult would it be to adapt your system to support a command whereby a user could rename existing commands (e.g. something like rename swap s)?


@TODO: We need to talk about how weâ€™re handling this
The command line interface is handling by main.cc, it is completely decoupled from the actual iplementation of the game. Thus, renaming commands is as trivial as changing "swap" to "custom_swap" in main.cc (there will only be one instance of "swap". If there arises a case where multiple instances of a command name are present, command names will be moved to variables).


